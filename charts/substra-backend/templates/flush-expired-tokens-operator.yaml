apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-flush-expired-tokens
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-flush-expired-tokens
    app.kubernetes.io/part-of: {{ template "substra.name" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-flush-expired-tokens
        app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-flush-expired-tokens
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: flush-expired-tokens
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        imagePullPolicy: "{{ .Values.backend.image.pullPolicy }}"
        command: ["/bin/bash", "-c"]
        args:
        - |
          while true; do
              now=$(date "+%Y/%m/%d %H:%M:%S")
              echo "$now flushing tokens"
              ./manage.py flushexpiredtokens

            ## Run command every 24H
            sleep 86400

          done
        env:
          - name: DJANGO_SETTINGS_MODULE
            value: backend.settings.{{ .Values.backend.settings }}
          - name: BACKEND_DB_NAME
            value: {{ .Values.postgresql.postgresqlDatabase }}
          - name: BACKEND_DB_USER
            value: {{ .Values.postgresql.postgresqlUsername }}
          - name: BACKEND_DB_PWD
            value: {{ .Values.postgresql.postgresqlPassword }}
          - name: DATABASE_HOST
            value: {{ .Release.Name }}-postgresql
          - name: PYTHONUNBUFFERED
            value: "1"
      initContainers:
      - name: wait-postgresql
        image: jwilder/dockerize:latest
        command: ['dockerize', '-wait', 'tcp://{{ .Release.Name }}-postgresql:5432']
